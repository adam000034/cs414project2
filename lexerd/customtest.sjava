abe.abe.abe
abe [];
abe [3];
abe [abe + 3]





for (int x = 10; x > Num[i]; x++) {}	//
c.employees[i].IDnumber = read();
cab.employees[i].sac[i].bad[jab] = new employee();  //WORKING
c.employess = new int[c.numEmployees]; //WORKING
e.employees[i] = new employee();  //WORKING
employe[i] = new employee();	//WORKING
for (int x = 10; x < 20; x++) {}	//WORKING: init and increment
for (int x = 10; x < c.Num; x++) {}	//WORKING remove semicolon from x++











x++;



c.numEmployees = read();	//WORKING
while (true) x = 1;		//WORKING
x = y;					//WORKING




while (true) {x = 1;}				//WORKING --> while loops


return i-1;
return x;						//RETURN STATEMENTS

int add(int x, int y);
println();
print(int value);
int read();						//BUILT-IN FUNCTIONS


{;}							//WORKING --> empty statements
arachn(x, 10, x + 20;);		//WORKING --> Void Function calls
do {x + y;} while (10 > 3)		//WORKING --> dowhile
if (x= false;) if (y = true;) {} else {}	//WORKING: if, dangling else


void main() { company C; C=ReadCompany(); WriteCompany(cat);}
company C;

C = ReadCompany();
int add();


boolean not(boolean x) { abe = true; block = false; }

boolean not(boolean x);
int x;
MyClass y;
int array[];
boolean twoDArray[][];

void printBoard(int board[][]);
class abe { int x; myclass y; int array[]; boolean twodarray[][]; }
int add(int x, int y);
y =abe++;
void foo() { }
int y = 3;
boolean x = y < 2;
myclass w;


y =abe-b;

void foo() { }
int y = 3;
boolean x = y < 2;
myclass w;

myclclass z = new myclass();
int A[];
int B[] = new int[5];
int C[][][] = new int[10][][];


if (x= false){ b = false; } else { b = true; }
true
false
0

abe [1+3]
abe []
abe.abe

abe ()
abe + 1
abe + abe
abe - 1
abe - abe
abe / 1
abe / abe
abe * 1
abe * abe
abe > 1
abe > abe
abe < abe
abe < 1
abe <= abe
abe <= 1
abe >= 1
abe >= abe
abe == 1
abe == abe
abe != 1
abe != abe

abe ++
int y = 4
int y = x + 1


