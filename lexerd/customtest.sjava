{;}							//WORKING --> empty statements
return x;					//NOT HANDLED --> return statements
arachn(x, 10, x + 20;);		//WORKING --> Void Function calls
for (int x = 10; x < 20; x ++;) {}	//NOT WORKING: init and increment
do {x + y;} while (10 > 3)		//WORKING --> dowhile
while (true) {}								//NOT WORKING: while loops
if (x= false;) if (y = true;) {} else {}	//WORKING: if, dangling else


void main() { company C; C=ReadCompany(); WriteCompany(cat);}
company C;

C = ReadCompany();
int add();


boolean not(boolean x) { abe = true; block = false; }

boolean not(boolean x);
int x;
MyClass y;
int array[];
boolean twoDArray[][];

void printBoard(int board[][]);
class abe { int x; myclass y; int array[]; boolean twodarray[][]; }
int add(int x, int y);
y =abe++;
void foo() { }
int y = 3;
boolean x = y < 2;
myclass w;


y =abe-b;

void foo() { }
int y = 3;
boolean x = y < 2;
myclass w;

myclclass z = new myclass();
int A[];
int B[] = new int[5];
int C[][][] = new int[10][][];


if (x= false){ b = false; } else { b = true; }
true
false
0
abe [];
abe [3];
abe [abe + 3]
abe [1+3]
abe []
abe.abe
abe.abe.abe
abe ()
abe + 1
abe + abe
abe - 1
abe - abe
abe / 1
abe / abe
abe * 1
abe * abe
abe > 1
abe > abe
abe < abe
abe < 1
abe <= abe
abe <= 1
abe >= 1
abe >= abe
abe == 1
abe == abe
abe != 1
abe != abe

abe ++
int y = 4
int y = x + 1


