options {
  IGNORE_CASE=true;
}

PARSER_BEGIN(simplejava)

public class simplejava {
}

PARSER_END(simplejava)

TOKEN_MGR_DECLS : 
{
	public static int nestedcomments = 0;
}

SKIP : 
{
    	< " " >
|    	< "\\t">
|    	< "\t">
|	< "EOF">
|	< "\n">
|	< "/*" > { nestedcomments++; SwitchTo(IN_COMMENT);}
|	< "//" (~["\n"])* "\n" >
}

<IN_COMMENT>
SKIP :
{
	< "*/" > { nestedcomments--; if (nestedcomments == 0) SwitchTo(DEFAULT);}
|	< "/*" > { nestedcomments++; }
|	< ~[] >
}

TOKEN : 
{
	< ELSE: "else">
|	< FOR: "for">
|	< IF: "if">
|	< WHILE: "while">
|	< DO: "do">
|	< CLASS: "class">
|	< TRUE: "true">
|	< FALSE: "false">
|	< RETURN: "return">
|	< NEW: "new">
}

TOKEN : 
{
	< PLUS: "+" >
|	< SEMICOLON: ";">
|	< MINUS: "-">
|	< TIMES: "*">
|	< DIVIDE: "/">
|	< EQUAL: "==">
|	< GREATER_THAN: ">">
|	< NOT: "!">
|	< LEFT_BRACE: "{">
|	< LEFT_BRACKET: "[">
|	< RIGHT_BRACKET: "]">
|	< PERIOD: ".">
|	< COMMA: ",">
|	< GREATER_THAN_OR_EQUAL_TO: ">=">
|	< AND: "&&">
|	< RIGHT_BRACE: "}">
|	< LEFT_PARENTHESIS: "(">
|	< RIGHT_PARENTHESIS: ")">
|	< NOT_EQUAL: "!=">
|	< LESS_THAN_OR_EQUAL_TO: "<=">
|	< LESS_THAN: "<">
|	< GETS: "=">
|	< OR: "||">
|	< ADD: "++">
|	< MINUSMINUS: "--">
|	< ONEVALUE: "1">
|   	< INTEGER_LITERAL: (["0"-"9"])+>
|	< IDENTIFIER: ["a"-"z"](["a"-"z","0"-"9"])*>
}

void program() :
{}
{    
	expression() <EOF>
}

void statement() :
{}
{
	dowhilestatement()
|	<LEFT_BRACE> ((statement())*) <RIGHT_BRACE>
|	
}

void dowhilestatement() :
{}
{
	<DO> statement() <WHILE> <LEFT_PARENTHESIS> test() <RIGHT_PARENTHESIS> 
}

void expression() :
{}
{
	<TRUE>
|	<FALSE>
|	<INTEGER_LITERAL>
|	<IDENTIFIER> followsvariablenames()
/*	NEW EXPRESSIONS */
|	<NEW> <IDENTIFIER> followsnew()
/*	OPERATOR EXPRESSIONS */
/*|	operatorexpressionsvariablesornumbers() */
|	variable()
}

void incrementstatement() :
{}
{
	<ADD>
|	<PLUS> <ONEVALUE>
}

void decrementstatement() :
{}
{
	<MINUSMINUS>
|	<MINUS> <ONEVALUE>
}

void variable() :
{}
{
	<LEFT_BRACKET> followsbrackets()
}

void expressionlist() :
{}
{
	((expression()((<COMMA>)))*)expression()
}

void statementlist() :
{}
{
	(((statement()<SEMICOLON>))*)statement()<SEMICOLON>
}

void followsnew() :
{}
{
	<LEFT_BRACKET> followsbrackets() <SEMICOLON>
|	<LEFT_PARENTHESIS><RIGHT_PARENTHESIS>
}

void assignmentstatement() :
{}
{
	((<SEMICOLON>)*)
}

void followsvariablenames() :
{}
{
	/* How to prevent from class types from getting the same rules as variables*/
	<IDENTIFIER> (<SEMICOLON> | (((<LEFT_BRACKET> followsbrackets())+))((<SEMICOLON>)?))	
|	((<PERIOD> <IDENTIFIER>)+)
|	<LEFT_PARENTHESIS> ((expressionlist())*) <RIGHT_PARENTHESIS>
|	arithimeticandlogic() 
|	<GETS> <IDENTIFIER> (assignmentstatement() | incrementstatement() | decrementstatement())	
}

void followsbrackets() :
{}
{
	(<INTEGER_LITERAL>|<IDENTIFIER>) ((arithimeticandlogic())?) <RIGHT_BRACKET> 
|	<RIGHT_BRACKET> 
}

void arithimeticandlogic() :
{}
{
	<PLUS> (<INTEGER_LITERAL>|<IDENTIFIER>)
|	<MINUS> (<INTEGER_LITERAL>|<IDENTIFIER>)
|	<DIVIDE> (<INTEGER_LITERAL>|<IDENTIFIER>)
|	<TIMES> (<INTEGER_LITERAL>|<IDENTIFIER>)
|	<GREATER_THAN> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<LESS_THAN> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<LESS_THAN_OR_EQUAL_TO> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<GREATER_THAN_OR_EQUAL_TO> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<EQUAL> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<NOT> <GETS> (<IDENTIFIER>|<INTEGER_LITERAL>)
/*|	(<AND> | <OR>) (<IDENTIFIER>|<INTEGER_LITERAL>) */
}

void operatorexpressionsvariables() :
{}
{
	mathstuff()
}

void mathstuff() :
{}
{
	<IDENTIFIER>
}
