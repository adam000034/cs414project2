options {
  IGNORE_CASE=true;
}

PARSER_BEGIN(simplejava)

public class simplejava {
}

PARSER_END(simplejava)

TOKEN_MGR_DECLS : 
{
	public static int nestedcomments = 0;
}

SKIP : 
{
  	< " " >
|   < "\\t">
|   < "\t">
|	< "EOF">
|	< "\n">
|	< "/*" > { nestedcomments++; SwitchTo(IN_COMMENT);}
|	< "//" (~["\n"])* "\n" >
}

<IN_COMMENT>
SKIP :
{
	< "*/" > { nestedcomments--; if (nestedcomments == 0) SwitchTo(DEFAULT);}
|	< "/*" > { nestedcomments++; }
|	< ~[] >
}

TOKEN : 
{
	< ELSE: "else">
|	< FOR: "for">
|	< IF: "if">
|	< WHILE: "while">
|	< DO: "do">
|	< CLASS: "class">
|	< TRUE: "true">
|	< FALSE: "false">
|	< RETURN: "return">
|	< NEW: "new">
}

TOKEN : 
{
	< PLUS: "+" >
|	< SEMICOLON: ";">
|	< MINUS: "-">
|	< TIMES: "*">
|	< DIVIDE: "/">
|	< EQUAL: "==">
|	< GREATER_THAN: ">">
|	< NOT: "!">
|	< LEFT_BRACE: "{">
|	< LEFT_BRACKET: "[">
|	< RIGHT_BRACKET: "]">
|	< PERIOD: ".">
|	< COMMA: ",">
|	< GREATER_THAN_OR_EQUAL_TO: ">=">
|	< AND: "&&">
|	< RIGHT_BRACE: "}">
|	< LEFT_PARENTHESIS: "(">
|	< RIGHT_PARENTHESIS: ")">
|	< NOT_EQUAL: "!=">
|	< LESS_THAN_OR_EQUAL_TO: "<=">
|	< LESS_THAN: "<">
|	< GETS: "=">
|	< OR: "||">
|	< ADD: "++">
|	< MINUSMINUS: "--">
|   < INTEGER_LITERAL: (["0"-"9"])+>
|	< IDENTIFIER: ["a"-"z"](["a"-"z","0"-"9"])*>
}

void program() :
{}
{    
/*perhaps put a star there to check multiple statements */
	/* 1) 0 or more class defs	2) 0 or more function defs	3) EOF */
	((classdefinitions())*) ((functionprototypeordefinition())*) <EOF> 
//	expression() <EOF>
}

void functionprototypeordefinition() :
{}
{
	<IDENTIFIER> <IDENTIFIER> <LEFT_PARENTHESIS> ((formalparameterlist())?) <RIGHT_PARENTHESIS> functionendingafterparen()
}

void functionendingafterparen() :
{}
{
	/* FUNCTION PROTOTYPE */
	<SEMICOLON>
	/* FUNCTION DEFINITION */
|	<LEFT_BRACE> ((statement())*) <RIGHT_BRACE>
}

void formalparameterlist() :
{}
{
	(formalparameter())((<COMMA>formalparameter())*)
}

void formalparameter() :
{}
{
	variabledeclarations()
}

void classdefinitions() :
{}
{
	/* Get value of identifier so that identifier will not show up in the body */
	<CLASS> <IDENTIFIER> <LEFT_BRACE> variabledefinitions() <RIGHT_BRACE>
}

void statement() :
{}
{
	dowhilestatement()
|	<RETURN> expression() 
|	<WHILE> <LEFT_PARENTHESIS> test() <RIGHT_PARENTHESIS> statement()
|	<IF> ifstatement()
|	forstatement()
|	<LEFT_BRACE> ((statement())*) <RIGHT_BRACE>
|	<IDENTIFIER> followsvariablenames() <SEMICOLON>
|	emptystatement()
}

void ifstatement() :
{}
{
	<LEFT_PARENTHESIS> expression() (((<AND> expression())?) | ((<OR> expression())?)) <RIGHT_PARENTHESIS> statement()
			((LOOKAHEAD(1) <ELSE> statement())?) 
	/*<LEFT_PARENTHESIS> test() <RIGHT_PARENTHESIS> statement()
		((LOOKAHEAD(1) <ELSE> statement())?) */
/*	<LEFT_PARENTHESIS> test() <RIGHT_PARENTHESIS> statement() <ELSE> statement()*/
/*|	<LEFT_PARENTHESIS> test() <RIGHT_PARENTHESIS> statement() */

}

void emptystatement() :
{}
{
	<SEMICOLON>
/* May not be necessary but added here anyways just to be sure 
|	<DO> <LEFT_BRACE> <RIGHT_BRACE> <WHILE> <LEFT_PARENTHESIS> test() <RIGHT_PARENTHESIS> <SEMICOLON>
|	<FOR> <LEFT_PARENTHESIS> initialization() <SEMICOLON> test() <SEMICOLON> initialization() <RIGHT_PARENTHESIS> <SEMICOLON>
|	<IF> <LEFT_PARENTHESIS> expression() <RIGHT_PARENTHESIS> <LEFT_BRACE> <RIGHT_BRACE>
|	<WHILE> <LEFT_PARENTHESIS> test() (((<AND> expression())?) | ((<OR> expression())?)) <RIGHT_PARENTHESIS> <SEMICOLON>
*/
}

void initialization() :
{}
{
	incrementstatement()
|	decrementstatement()
|	assignmentstatement()
}

void forstatement() :
{}
{
	/*Second initialization() is actually increment from book */
	<FOR> <LEFT_PARENTHESIS> 
		((<IDENTIFIER> (followsvariablenames())*)?) <SEMICOLON> 
		test() <SEMICOLON> 
		((<IDENTIFIER> initialization())?) 
		<RIGHT_PARENTHESIS> statement()
}

void test() :
{}
{
	booleanexpression()
|	<IDENTIFIER> ((expressionsversionfollowsvariablenames())?)
//	expression()
}

void dowhilestatement() :
{}
{
	<DO> statement() <WHILE> <LEFT_PARENTHESIS> expression() (((<AND> expression())?) | ((<OR> expression())?)) <RIGHT_PARENTHESIS> 
}

void expression() :
{}
{
	booleanexpression()
|	<IDENTIFIER> ((expressionsversionfollowsvariablenames())?) ((<SEMICOLON>)?)
/*	NEW EXPRESSIONS */
|	<NEW> <IDENTIFIER> followsnewandidentifier() <SEMICOLON>
/*	OPERATOR EXPRESSIONS */
/*|	operatorexpressionsvariablesornumbers() */
|	variable()
}

void booleanexpression() :
{}
{
	<TRUE>
|	<FALSE>
|	<INTEGER_LITERAL> ((arithmeticandlogic())*)
}

void incrementstatement() :
{}
{
	<ADD>
}

void decrementstatement() :
{}
{
	<MINUSMINUS>
}

void incrementstatements() :
{}
{
	incrementstatement()
|	decrementstatement()
}

void variabledeclarations() :
{}
{	
	<IDENTIFIER> <IDENTIFIER> ((followsclassdefinitionstypes())*)
}

void followsclassdefinitionstypes() :
{}
{
	<LEFT_BRACKET> ((followsbrackets())+) 

}

void variabledefinitions() :
{}
{
	(((variabledeclarations())<SEMICOLON>)*)
}



void variable() :
{}
{
	<LEFT_BRACKET> followsbrackets()
}

void expressionlist() :
{}
{
	expression()((<COMMA>expression())*)
}

void statementlist() :
{}
{
	statement()((statement())*)
}

void followsnewandidentifier() :
{}
{
	<LEFT_BRACKET> followsbrackets() 
|	<LEFT_PARENTHESIS><RIGHT_PARENTHESIS>
}

void assignmentstatement() :
{}
{
	<GETS> ((<IDENTIFIER> ((followsvariablenames())?)) | (<INTEGER_LITERAL>) | (<NEW> <IDENTIFIER> followsnewandidentifier()) | (<TRUE>) | (<FALSE>))
}

void followsvariablenames() :
{}
{
	/* How to prevent from class types from getting the same rules as variables*/
	<IDENTIFIER> ((followsvariablenames())*) 
|	((<PERIOD> <IDENTIFIER>)+) ((followsvariablenames())?)
|	<LEFT_PARENTHESIS> ((expressionlist())?) <RIGHT_PARENTHESIS>
|	arithmeticandlogic() 
|	assignmentstatement()
/* Need a way to make sure that amount of brackets are matched on left side with number on right side */
|	variabledeclarationstatemementsbrackets()
|	incrementstatements()
}

void expressionsversionfollowsvariablenames() :
{}
{
	/* How to prevent from class types from getting the same rules as variables*/
	<IDENTIFIER> ((expressionsversionfollowsvariablenames())*) 
|	((<PERIOD> <IDENTIFIER>)+) ((followsvariablenames())?)
|	<LEFT_PARENTHESIS> ((expressionlist())?) <RIGHT_PARENTHESIS>
|	arithmeticandlogic() 
/* Need a way to make sure that amount of brackets are matched on left side with number on right side */
|	variabledeclarationstatemementsbrackets()
|	incrementstatements()
}

void variabledeclarationstatemementsbrackets() :
{}
{
	((<LEFT_BRACKET> followsbrackets())+) 
		(assignmentstatement() | ((<GETS> <NEW> <IDENTIFIER> 			/* = new id */
		<LEFT_BRACKET> 
			((<INTEGER_LITERAL>((followsintegerwithinbrackets())*))
			| (<IDENTIFIER>((followsidentifierwithinbrackets())*)))
		<RIGHT_BRACKET>	
			/* [something] --> used * for withinbrackeets() because could be more than one: ex: [10 + function() + x.y.z] 
			separated integer with identifier because cannot have integer.identifier*/
		((<LEFT_BRACKET> <RIGHT_BRACKET>)*))?)) 		/* [][][]... */

/*	((<LEFT_BRACKET> followsbrackets())+) ((<GETS> <NEW> <IDENTIFIER> ((<LEFT_BRACKET> followsbrackets())+))?) */
}

void followsintegerwithinbrackets() :
{}
{
	(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>) 
		(<INTEGER_LITERAL>
		| 
		((<IDENTIFIER> | (<LEFT_PARENTHESIS> ((expressionlist())?) <RIGHT_PARENTHESIS>)) (followsidentifierwithinbrackets())*)
		)
}

void followsidentifierwithinbrackets() :
{}
{
	(<PLUS>|<MINUS>|<TIMES>|<DIVIDE>) (<IDENTIFIER>|<INTEGER_LITERAL>|(<LEFT_PARENTHESIS> ((expressionlist())?) <RIGHT_PARENTHESIS>))
|	((<PERIOD> <IDENTIFIER>)+)
}

void followsbrackets() :
{}
{
	(<INTEGER_LITERAL>|<IDENTIFIER>) ((arithmeticandlogic())?) <RIGHT_BRACKET> 
|	<RIGHT_BRACKET> 
}

void arithmeticandlogic() :
{}
{
	arithmetic()
|	<GREATER_THAN> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<LESS_THAN> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<LESS_THAN_OR_EQUAL_TO> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<GREATER_THAN_OR_EQUAL_TO> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<EQUAL> (<IDENTIFIER>|<INTEGER_LITERAL>)
|	<NOT_EQUAL> (<IDENTIFIER>|<INTEGER_LITERAL>)
/* |(<AND> | <OR>) (<IDENTIFIER>|<INTEGER_LITERAL>) */
}

void arithmetic() :
{}
{
	<PLUS> (<INTEGER_LITERAL>|<IDENTIFIER>)
|	<MINUS> (<INTEGER_LITERAL>|<IDENTIFIER>)
|	<DIVIDE> (<INTEGER_LITERAL>|<IDENTIFIER>)
|	<TIMES> (<INTEGER_LITERAL>|<IDENTIFIER>)
}

void operatorexpressionsvariables() :
{}
{
	mathstuff()
}

void mathstuff() :
{}
{
	<IDENTIFIER>
}
